-- require('luasnip.loaders.from_vscode').load({paths = '~/.config/nvim'})
-- require('luasnip.loaders.from_vscode').load()
-- require('luasnip.loaders.from_snipmate').load({paths = {"~/.config/nvim/snippets"}})

-- local function prequire(...)
-- local status, lib = pcall(require, ...)
-- if (status) then return lib end
-- return nil
-- end
--
-- local luasnip = prequire('luasnip')
-- local cmp = prequire("cmp")
--
-- -- Load snippets on demand and reload after change
-- function _G.snippets_clear()
-- for m, _ in pairs(luasnip.snippets) do
-- package.loaded["snippets."..m] = nil
-- end
-- luasnip.snippets = setmetatable({}, {
-- __index = function(t, k)
-- local ok, m = pcall(require, "snippets." .. k)
-- if not ok and not string.match(m, "^module.*not found:") then
-- error(m)
-- end
-- t[k] = ok and m or {}
-- return t[k]
-- end
-- })
-- end
--
-- _G.snippets_clear()
--
-- vim.cmd [[
-- augroup snippets_clear
-- au!
-- au BufWritePost ~/.config/nvim/lua/snippets/*.lua lua _G.snippets_clear()
-- augroup END
-- ]]
--
-- function _G.edit_ft()
-- -- returns table like {"lua", "all"}
-- local fts = require("luasnip.util.util").get_snippet_filetypes()
-- vim.ui.select(fts, {
-- prompt = "Select which filetype to edit:"
-- }, function(item, idx)
-- -- selection aborted -> idx == nil
-- if idx then
-- vim.cmd("edit ~/.config/nvim/lua/snippets/"..item..".lua")
-- end
-- end)
-- end
--
-- vim.cmd [[command! LuaSnipEdit :lua _G.edit_ft()]]
--
-- local t = function(str)
-- return vim.api.nvim_replace_termcodes(str, true, true, true)
-- end
--
-- local check_back_space = function()
-- local col = vim.fn.col('.') - 1
-- if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
-- return true
-- else
-- return false
-- end
-- end
--
-- _G.tab_complete = function()
-- if cmp and cmp.visible() then
-- cmp.select_next_item()
-- elseif luasnip and luasnip.expand_or_jumpable() then
-- return t("<Plug>luasnip-expand-or-jump")
-- elseif check_back_space() then
-- return t "<Tab>"
-- else
-- cmp.complete()
-- end
-- return ""
-- end
-- _G.s_tab_complete = function()
-- if cmp and cmp.visible() then
-- cmp.select_prev_item()
-- elseif luasnip and luasnip.jumpable(-1) then
-- return t("<Plug>luasnip-jump-prev")
-- else
-- return t "<S-Tab>"
-- end
-- return ""
-- end
--
-- vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("i", "<C-E>", "<Plug>luasnip-next-choice", {})
-- vim.api.nvim_set_keymap("s", "<C-E>", "<Plug>luasnip-next-choice", {})
--
-- -- load vscode style snippets
-- require('luasnip.loaders.from_vscode').load()

-- return {
    -- "L3MON4D3/LuaSnip",
    -- build = 'make install_jsregexp',
    -- opts = {
        -- enable_autosnippets = true,
        -- store_selection_keys = "<Tab>",
        -- history = true,
        -- delete_check_events = "TextChanged",
    -- },
    -- config = function()
        -- -- Load snippets from ~/.config/nvim/lua/snippets/
        -- require("luasnip.loaders.from_lua").load({ paths = "~/.config/nvim/lua/snippets/" })
    -- end
-- }

return {}
